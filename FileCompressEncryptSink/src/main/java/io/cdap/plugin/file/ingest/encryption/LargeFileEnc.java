package io.cdap.plugin.file.ingest.encryption;

import org.bouncycastle.bcpg.ArmoredOutputStream;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.openpgp.*;
import org.bouncycastle.openpgp.jcajce.JcaPGPObjectFactory;
import org.bouncycastle.openpgp.operator.jcajce.JcaPGPDigestCalculatorProviderBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcePBEDataDecryptorFactoryBuilder;
import org.bouncycastle.openpgp.operator.jcajce.JcePBEKeyEncryptionMethodGenerator;
import org.bouncycastle.openpgp.operator.jcajce.JcePGPDataEncryptorBuilder;
import org.bouncycastle.util.io.Streams;

import java.io.*;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.security.Security;

/**
 * @author Vikas K  Created On 07/11/19
 **/

public class LargeFileEnc {
    private static void encryptLargeFile(
            OutputStream out,
            String fileName,
            char[] passPhrase,
            boolean armor,
            boolean withIntegrityCheck)
            throws IOException, NoSuchProviderException {
        if (armor) {
            out = new ArmoredOutputStream(out);
        }

        try {
            //byte[] compressedData = PGPExampleUtil.compressFile(fileName, CompressionAlgorithmTags.ZIP);

            PGPEncryptedDataGenerator encGen = new PGPEncryptedDataGenerator(new JcePGPDataEncryptorBuilder(PGPEncryptedData.CAST5)
                    .setWithIntegrityPacket(withIntegrityCheck).setSecureRandom(new SecureRandom()).setProvider("BC"));

            encGen.addMethod(new JcePBEKeyEncryptionMethodGenerator(passPhrase).setProvider("BC"));

            //OutputStream encOut = encGen.open(out, compressedData.length);
            OutputStream cOut = encGen.open(out, new byte[1 << 16]);

            PGPCompressedDataGenerator comData = new PGPCompressedDataGenerator(
                    PGPCompressedData.ZIP);

            PGPUtil.writeFileToLiteralData(comData.open(cOut), PGPLiteralData.BINARY, new File(fileName), new byte[1 << 16]);

            //encOut.write(compressedData);
            //encOut.close();

            cOut.close();
            encGen.close();

            if (armor) {
                out.close();
            }
        } catch (PGPException e) {
            System.err.println(e);
            if (e.getUnderlyingException() != null) {
                e.getUnderlyingException().printStackTrace();
            }
        }
    }

    /*
     * decrypt the passed in message stream
     */
    private static void decryptFile(
            InputStream in,
            char[] passPhrase)
            throws IOException, NoSuchProviderException, PGPException {
        in = PGPUtil.getDecoderStream(in);

        JcaPGPObjectFactory pgpF = new JcaPGPObjectFactory(in);
        PGPEncryptedDataList enc;
        Object o = pgpF.nextObject();

        //
        // the first object might be a PGP marker packet.
        //
        if (o instanceof PGPEncryptedDataList) {
            enc = (PGPEncryptedDataList) o;
        } else {
            enc = (PGPEncryptedDataList) pgpF.nextObject();
        }

        PGPPBEEncryptedData pbe = (PGPPBEEncryptedData) enc.get(0);

        InputStream clear = pbe.getDataStream(new JcePBEDataDecryptorFactoryBuilder(new JcaPGPDigestCalculatorProviderBuilder().setProvider("BC").build()).setProvider("BC").build(passPhrase));

        JcaPGPObjectFactory pgpFact = new JcaPGPObjectFactory(clear);

        //
        // if we're trying to read a file generated by someone other than us
        // the data might not be compressed, so we check the return type from
        // the factory and behave accordingly.
        //
        o = pgpFact.nextObject();
        if (o instanceof PGPCompressedData) {
            PGPCompressedData cData = (PGPCompressedData) o;

            pgpFact = new JcaPGPObjectFactory(cData.getDataStream());

            o = pgpFact.nextObject();
        }

        PGPLiteralData ld = (PGPLiteralData) o;
        InputStream unc = ld.getInputStream();

        OutputStream fOut = new BufferedOutputStream(new FileOutputStream(ld.getFileName()));

        Streams.pipeAll(unc, fOut);

        fOut.close();

        if (pbe.isIntegrityProtected()) {
            if (!pbe.verify()) {
                System.err.println("message failed integrity check");
            } else {
                System.err.println("message integrity check passed");
            }
        } else {
            System.err.println("no message integrity check");
        }
    }

    public static void main(
            String[] args)
            throws Exception {


        Security.addProvider(new BouncyCastleProvider());
        //enc();
        dec();



    }

    static String outputFileName = "/Users/vikaskumar/dev/cdap/projects/shiva-repo/fileplugins/FileCompressEncryptSink/src/main/resources/a.csv.asc";
    private static void enc() throws IOException, NoSuchProviderException {

        String inputFileName = "/Users/vikaskumar/dev/cdap/projects/shiva-repo/fileplugins/FileCompressEncryptSink/src/main/resources/a_bkp.csv";
        OutputStream out = null;
        out = new BufferedOutputStream(new FileOutputStream(outputFileName));

        encryptLargeFile(out, inputFileName, "password".toCharArray(), true, true);
    }

    private static void dec() throws IOException, NoSuchProviderException, PGPException {
        //String inputFileName = "/Users/vikaskumar/dev/cdap/projects/shiva-repo/fileplugins/FileCompressEncryptSink/src/main/resources/a_bkp.csv.asc";
        //String outFileName = "/Users/vikaskumar/dev/cdap/projects/shiva-repo/fileplugins/FileCompressEncryptSink/src/main/resources/a_out.csv";
        InputStream in = new BufferedInputStream(new FileInputStream(outputFileName));

        decryptFile(in,  "password".toCharArray());
    }
}
